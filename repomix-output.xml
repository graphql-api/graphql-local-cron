<repomix>This file is a merged representation of a subset of the codebase, containing specifically included files and files not matching ignore patterns, combined into a single document by Repomix. The content has been processed where content has been formatted for parsing.<file_summary>This section contains a summary of this file.<purpose>This file contains a packed representation of the entire repository&apos;s contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.</purpose><file_format>The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file</file_format><usage_guidelines>- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
- Pay special attention to the Repository Description. These contain important context and guidelines specific to this project.</usage_guidelines><notes>- Some files may have been excluded based on .gitignore rules and Repomix&apos;s configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: **/*
- Files matching these patterns are excluded: tmp/, *.log
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Content has been formatted for parsing in xml style</notes><additional_info><user_provided_header>Custom header text</user_provided_header></additional_info></file_summary><directory_structure>.github/
  workflows/
    apollo-studio.yml
    graphql-inspector.yml
    publish-github-package.yml
    vercel.yml
examples/
  next/
    public/
      vercel.svg
    src/
      app/
        api/
          graphql/
            route.ts
        docs/
          page.tsx
        layout.tsx
        page.tsx
      graphql/
        client.ts
      styles/
        globals.css
        Home.module.css
    .eslintrc.json
    next-env.d.ts
    next.config.ts
    package.json
    README.md
    tsconfig.json
src/
  cron.ts
  index.ts
  resolvers.ts
  typeDefs.graphql
  types.d.ts
.gitignore
.npmignore
.npmrc
.prettierrc
.stackblitzrc
codegen.yaml
package.json
pnpm-workspace.yaml
README.md
repomix.config.json
tsconfig.json
tsconfig.reference.json</directory_structure><files>This section contains the contents of the repository&apos;s files.<file path=".github/workflows/apollo-studio.yml">name: Apollo Studio
on: [push]
# https://www.apollographql.com/docs/rover/ci-cd/#full-example-1
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called &quot;build&quot;
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # https://docs.github.com/en/actions/reference/environments
    environment: apollo
    # https://docs.github.com/en/actions/reference/encrypted-secrets
    # https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstepsenv
    env:
      APOLLO_KEY: ${{ secrets.APOLLO_KEY }}
      APOLLO_VCS_COMMIT: ${{ github.event.pull_request.head.sha }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Install Rover
        run: |
          curl -sSL https://rover.apollo.dev/nix/v0.1.0 | sh
          # Add Rover to the $GITHUB_PATH so it can be used in another step
          # https://docs.github.com/en/actions/reference/workflow-commands-for-github-actions#adding-a-system-path
          echo &quot;$HOME/.rover/bin&quot; &gt;&gt; $GITHUB_PATH
      - name: Run check against prod
        run: |
          rover graph publish TEMPLATE@current --schema ./schema.graphql</file><file path=".github/workflows/graphql-inspector.yml">name: GraphQL Inspector

on: [push]

# https://www.graphql-inspector.com/docs/products/action
jobs:
  test:
    name: Check Schema
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@master

      - uses: kamilkisiela/graphql-inspector@master
        with:
          schema: &quot;master:schema.graphql&quot;</file><file path=".github/workflows/publish-github-package.yml">name: Github Package
# https://dev.to/cloudx/publish-an-npm-to-github-packages-3pa8

on:
  release:
    types: [created]
jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 16
      - run: npm install
      - run: npm run build
      - run: |
          echo @lexacode:https://npm.pkg.github.com/ &gt; build/.npmrc
          echo &apos;//npm.pkg.github.com/:_authToken=${NPM_TOKEN}&apos; &gt;&gt; build/.npmrc
      - run: npm publish
        working-directory: ./build
        env:
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}</file><file path=".github/workflows/vercel.yml">name: Vercel
on: [push]
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursiv
          token: ${{ secrets.PTA }}
      - uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_ACCESS_TOKEN }} # Required
          github-token: ${{ secrets.GITHUB_TOKEN }} #Optional 
          #vercel-args: &apos;--prod&apos; #Optional
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID}}  #Required
          scope: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID}} #Required</file><file path="examples/next/public/vercel.svg">&lt;svg width=&quot;283&quot; height=&quot;64&quot; viewBox=&quot;0 0 283 64&quot; fill=&quot;none&quot; 
    xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;
    &lt;path d=&quot;M141.04 16c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.46 14.5c1.25-3.99 4.67-6.5 9.45-6.5 4.79 0 8.21 2.51 9.45 6.5h-18.9zM248.72 16c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.45 14.5c1.25-3.99 4.67-6.5 9.45-6.5 4.79 0 8.21 2.51 9.45 6.5h-18.9zM200.24 34c0 6 3.92 10 10 10 4.12 0 7.21-1.87 8.8-4.92l7.68 4.43c-3.18 5.3-9.14 8.49-16.48 8.49-11.05 0-19-7.2-19-18s7.96-18 19-18c7.34 0 13.29 3.19 16.48 8.49l-7.68 4.43c-1.59-3.05-4.68-4.92-8.8-4.92-6.07 0-10 4-10 10zm82.48-29v46h-9V5h9zM36.95 0L73.9 64H0L36.95 0zm92.38 5l-27.71 48L73.91 5H84.3l17.32 30 17.32-30h10.39zm58.91 12v9.69c-1-.29-2.06-.49-3.2-.49-5.81 0-10 4-10 10V51h-9V17h9v9.2c0-5.08 5.91-9.2 13.2-9.2z&quot; fill=&quot;#000&quot;/&gt;
&lt;/svg&gt;</file><file path="examples/next/src/app/api/graphql/route.ts">import type { GraphQLSchema } from &apos;graphql&apos;
import { ApolloServer } from &apos;@apollo/server&apos;
import { startServerAndCreateNextHandler } from &apos;@as-integrations/next&apos;

import type { ApolloConfig, ApolloServerOptionsWithTypeDefs, BaseContext } from &apos;@apollo/server&apos;
import { NextRequest } from &apos;next/server&apos;

type GraphQLRouteOptions&lt;Context extends BaseContext = BaseContext&gt; = (
    | {
        typeDefs: ApolloServerOptionsWithTypeDefs&lt;Context&gt;[&apos;typeDefs&apos;]
        resolvers: ApolloServerOptionsWithTypeDefs&lt;Context&gt;[&apos;resolvers&apos;]
    }
    | { schema: GraphQLSchema }
) &amp;
    Partial&lt;ApolloConfig&gt;


const server = new ApolloServer({
    typeDefs: &quot;&quot;,
    resolvers: {}
})
const handler: (req: NextRequest) =&gt; void = startServerAndCreateNextHandler(server)

export {
    handler as GET,
    handler as POST
}</file><file path="examples/next/src/app/docs/page.tsx">export default async function DocsPage() {


    return &lt;div&gt;DOCS&lt;/div&gt;
}</file><file path="examples/next/src/app/layout.tsx">import React from &quot;react&quot;;
import &apos;../styles/globals.css&apos;

export default async function RootLayout({ children }: React.PropsWithChildren&lt;{}&gt;) {
    return &lt;html&gt;
        &lt;head&gt;
            &lt;title&gt;Create Next App&lt;/title&gt;
            &lt;meta name=&quot;description&quot; content=&quot;Generated by create next app&quot; /&gt;
            &lt;link rel=&quot;icon&quot; href=&quot;/favicon.ico&quot; /&gt;
        &lt;/head&gt;
        &lt;body&gt;
            {children}
        &lt;/body&gt;
    &lt;/html&gt;
}</file><file path="examples/next/src/app/page.tsx">import Link from &quot;next/link&quot;;
import styles from &quot;../styles/Home.module.css&quot;;

export default async function RootPage() {


    return &lt;div className={styles.container}&gt;


        &lt;main className={styles.main}&gt;
            &lt;h1 className={styles.title}&gt;
                &lt;div&gt;GraphQL Library Template&lt;/div&gt;

            &lt;/h1&gt;

        &lt;/main&gt;

        &lt;footer className={styles.footer}&gt;
            &lt;Link href=&quot;https://github.com/graphql-api/graphql-local-cron&quot;&gt;Github&lt;/Link&gt;
        &lt;/footer&gt;
    &lt;/div&gt;
}</file><file path="examples/next/src/graphql/client.ts">import { ApolloClient, InMemoryCache, gql } from &apos;@apollo/client&apos;;
import { GraphQLCronJob } from &apos;@graphql-api/cron.local&apos;


export class ApolloGraphqlCronJob extends GraphQLCronJob {
    private client: ApolloClient&lt;any&gt;;
    private jobs: Map&lt;string, GraphQLCronJob&gt;;

    constructor(uri: string) {
        super()
        this.client = new ApolloClient({
            uri,
            cache: new InMemoryCache(),
        });
        this.jobs = new Map();

    }
}</file><file path="examples/next/src/styles/globals.css">html,
body {
  padding: 0;
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen,
    Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;
}

a {
  color: inherit;
  text-decoration: none;
}

* {
  box-sizing: border-box;
}</file><file path="examples/next/src/styles/Home.module.css">.container {
  padding: 0 2rem;
}

.main {
  min-height: 100vh;
  padding: 4rem 0;
  flex: 1;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.footer {
  display: flex;
  flex: 1;
  padding: 2rem 0;
  border-top: 1px solid #eaeaea;
  justify-content: center;
  align-items: center;
}

.footer a {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-grow: 1;
}

.title a {
  color: #0070f3;
  text-decoration: none;
}

.title a:hover,
.title a:focus,
.title a:active {
  text-decoration: underline;
}

.title {
  margin: 0;
  line-height: 1.15;
  font-size: 4rem;
}

.title,
.description {
  text-align: center;
}

.description {
  margin: 4rem 0;
  line-height: 1.5;
  font-size: 1.5rem;
}

.code {
  background: #fafafa;
  border-radius: 5px;
  padding: 0.75rem;
  font-size: 1.1rem;
  font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono,
    Bitstream Vera Sans Mono, Courier New, monospace;
}

.grid {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-wrap: wrap;
  max-width: 800px;
}

.card {
  margin: 1rem;
  padding: 1.5rem;
  text-align: left;
  color: inherit;
  text-decoration: none;
  border: 1px solid #eaeaea;
  border-radius: 10px;
  transition: color 0.15s ease, border-color 0.15s ease;
  max-width: 300px;
}

.card:hover,
.card:focus,
.card:active {
  color: #0070f3;
  border-color: #0070f3;
}

.card h2 {
  margin: 0 0 1rem 0;
  font-size: 1.5rem;
}

.card p {
  margin: 0;
  font-size: 1.25rem;
  line-height: 1.5;
}

.logo {
  height: 1em;
  margin-left: 0.5rem;
}

@media (max-width: 600px) {
  .grid {
    width: 100%;
    flex-direction: column;
  }
}</file><file path="examples/next/.eslintrc.json">{
  &quot;extends&quot;: &quot;next/core-web-vitals&quot;
}</file><file path="examples/next/next-env.d.ts">/// &lt;reference types=&quot;next&quot; /&gt;
/// &lt;reference types=&quot;next/image-types/global&quot; /&gt;

// NOTE: This file should not be edited
// see https://nextjs.org/docs/basic-features/typescript for more information.</file><file path="examples/next/next.config.ts">/** @type {import(&apos;next&apos;).NextConfig} */
const nextConfig = {
  reactStrictMode: true,
}

module.exports = nextConfig</file><file path="examples/next/package.json">{
  &quot;name&quot;: &quot;@/example&quot;,
  &quot;private&quot;: true,
  &quot;scripts&quot;: {
    &quot;dev&quot;: &quot;next dev --turbopack&quot;,
    &quot;build&quot;: &quot;next build&quot;,
    &quot;start&quot;: &quot;next start&quot;,
    &quot;lint&quot;: &quot;next lint&quot;,
    &quot;next:upgrade&quot;: &quot;pnpm dlx @next/codemod@canary upgrade canary&quot;
  },
  &quot;dependencies&quot;: {
    &quot;@apollo/client&quot;: &quot;^3.13.1&quot;,
    &quot;@apollo/server&quot;: &quot;^4.11.3&quot;,
    &quot;@apollo/subgraph&quot;: &quot;^2.10.0&quot;,
    &quot;@apollo/utils.keyvaluecache&quot;: &quot;^3.1.0&quot;,
    &quot;@as-integrations/next&quot;: &quot;^3.2.0&quot;,
    &quot;@graphql-api/cron.local&quot;: &quot;workspace:*&quot;,
    &quot;graphql-scalars&quot;: &quot;^1.24.1&quot;,
    &quot;graphql-tag&quot;: &quot;^2.12.6&quot;,
    &quot;next&quot;: &quot;^15.2.1-canary.2&quot;,
    &quot;node-cron&quot;: &quot;^3.0.3&quot;,
    &quot;react&quot;: &quot;^19&quot;,
    &quot;react-dom&quot;: &quot;^19&quot;,
    &quot;urql&quot;: &quot;^4.2.1&quot;
  },
  &quot;devDependencies&quot;: {
    &quot;@types/node&quot;: &quot;^22&quot;,
    &quot;@types/react&quot;: &quot;^19&quot;,
    &quot;@types/react-dom&quot;: &quot;^19&quot;,
    &quot;eslint&quot;: &quot;^9&quot;,
    &quot;eslint-config-next&quot;: &quot;15.2.1-canary.2&quot;,
    &quot;typescript&quot;: &quot;^5&quot;
  }
}</file><file path="examples/next/README.md">This is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `pages/index.tsx`. The page auto-updates as you edit the file.

[API routes](https://nextjs.org/docs/api-routes/introduction) can be accessed on [http://localhost:3000/api/hello](http://localhost:3000/api/hello). This endpoint can be edited in `pages/api/hello.ts`.

The `pages/api` directory is mapped to `/api/*`. Files in this directory are treated as [API routes](https://nextjs.org/docs/api-routes/introduction) instead of React pages.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&amp;filter=next.js&amp;utm_source=create-next-app&amp;utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.</file><file path="examples/next/tsconfig.json">{
  &quot;compilerOptions&quot;: {
    &quot;target&quot;: &quot;es5&quot;,
    &quot;lib&quot;: [
      &quot;dom&quot;,
      &quot;dom.iterable&quot;,
      &quot;esnext&quot;
    ],
    &quot;allowJs&quot;: true,
    &quot;skipLibCheck&quot;: true,
    &quot;strict&quot;: true,
    &quot;forceConsistentCasingInFileNames&quot;: true,
    &quot;noEmit&quot;: true,
    &quot;esModuleInterop&quot;: true,
    &quot;composite&quot;: true,
    &quot;module&quot;: &quot;esnext&quot;,
    &quot;moduleResolution&quot;: &quot;node&quot;,
    &quot;resolveJsonModule&quot;: true,
    &quot;isolatedModules&quot;: true,
    &quot;jsx&quot;: &quot;preserve&quot;,
    &quot;incremental&quot;: true,
    &quot;rootDir&quot;: &quot;../../&quot;,
    &quot;baseUrl&quot;: &quot;.&quot;,
    &quot;paths&quot;: {
      &quot;@graphql-api/cron.local/*&quot;: [
        &quot;../../src/*&quot;
      ],
      &quot;@/*&quot;: [
        &quot;./src/*&quot;
      ]
    }
  },
  &quot;include&quot;: [
    &quot;next-env.d.ts&quot;,
    &quot;next.config.ts&quot;,
    &quot;**/*.ts&quot;,
    &quot;**/*.tsx&quot;
  ],
  &quot;exclude&quot;: [
    &quot;node_modules&quot;
  ],
  &quot;references&quot;: [
    {
      &quot;path&quot;: &quot;../../tsconfig.reference.json&quot;
    }
  ]
}</file><file path="src/cron.ts">import type { ScheduledTask as NodeCronJob } from &apos;node-cron&apos;;
import { EventEmitter } from &apos;events&apos;


interface CronJobConfig {
    cronTime: string;
    onTick: () =&gt; void;
}

export class CronJob extends EventEmitter implements NodeCronJob {
    [EventEmitter.captureRejectionSymbol]?&lt;K&gt;(error: Error, event: string | symbol, ...args: any[]): void {
        throw new Error(&apos;Method not implemented.&apos;);
    }

    constructor(args: CronJobConfig) {
        super()
    }

    addListener&lt;K&gt;(eventName: string | symbol, listener: (...args: any[]) =&gt; void): this {
        throw new Error(&apos;Method not implemented.&apos;);
    }
    on&lt;K&gt;(eventName: string | symbol, listener: (...args: any[]) =&gt; void): this {
        throw new Error(&apos;Method not implemented.&apos;);
    }
    once&lt;K&gt;(eventName: string | symbol, listener: (...args: any[]) =&gt; void): this {
        throw new Error(&apos;Method not implemented.&apos;);
    }
    removeListener&lt;K&gt;(eventName: string | symbol, listener: (...args: any[]) =&gt; void): this {
        throw new Error(&apos;Method not implemented.&apos;);
    }
    off&lt;K&gt;(eventName: string | symbol, listener: (...args: any[]) =&gt; void): this {
        throw new Error(&apos;Method not implemented.&apos;);
    }
    removeAllListeners(event?: string | symbol | undefined): this {
        throw new Error(&apos;Method not implemented.&apos;);
    }
    setMaxListeners(n: number): this {
        throw new Error(&apos;Method not implemented.&apos;);
    }
    getMaxListeners(): number {
        throw new Error(&apos;Method not implemented.&apos;);
    }
    listeners&lt;K&gt;(eventName: string | symbol): Function[] {
        throw new Error(&apos;Method not implemented.&apos;);
    }
    rawListeners&lt;K&gt;(eventName: string | symbol): Function[] {
        throw new Error(&apos;Method not implemented.&apos;);
    }
    emit&lt;K&gt;(eventName: string | symbol, ...args: any[]): boolean {
        throw new Error(&apos;Method not implemented.&apos;);
    }
    listenerCount&lt;K&gt;(eventName: string | symbol, listener?: Function | undefined): number {
        throw new Error(&apos;Method not implemented.&apos;);
    }
    prependListener&lt;K&gt;(eventName: string | symbol, listener: (...args: any[]) =&gt; void): this {
        throw new Error(&apos;Method not implemented.&apos;);
    }
    prependOnceListener&lt;K&gt;(eventName: string | symbol, listener: (...args: any[]) =&gt; void): this {
        throw new Error(&apos;Method not implemented.&apos;);
    }
    eventNames(): (string | symbol)[] {
        throw new Error(&apos;Method not implemented.&apos;);
    }
    now() { }
    start() { }
    stop() { }


}


export class GraphQLCron {
    private jobs: Map&lt;string, CronJob&gt;;

    constructor(uri: string) {

        this.jobs = new Map();
    }

    public async createJob(id: string, config: CronJobConfig) {
        if (this.jobs.has(id)) {
            throw new Error(`Job with ID ${id} already exists.`);
        }

        const job = new CronJob(config);
        this.jobs.set(id, job);
        job.start();
        return true;
    }

    public async stopJob(id: string) {
        const job = this.jobs.get(id);
        if (job) {
            job.stop();
            this.jobs.delete(id);
            return true;
        }
        return false;
    }

    public async getJobs() {
        return Array.from(this.jobs.keys());
    }
}

export default GraphQLCron;</file><file path="src/index.ts">export * as resolvers from &quot;./resolvers&quot;;

export { GraphQLCron } from &apos;./cron&apos;</file><file path="src/resolvers.ts">import type { CronJob as ICronJob, Mutation as IMutation, Query as IQuery } from &apos;./types&apos;

export const CronJob = {}
export const Query = {}
export const Mutation = {}</file><file path="src/typeDefs.graphql">interface Node {
  id: ID!
}

type Query {
  hello: String
}

type Mutation {
  say(input: String!): String!
}

type CronJob {
  id: ID!
  cronTime: String!
}

type Query {
  cronJobs: [CronJob!]!
}

type Mutation {
  createCronJob(id: ID!, cronTime: String!): Boolean!
  stopCronJob(id: ID!): Boolean!
}</file><file path="src/types.d.ts">export interface CronJob&lt;ID extends string = string&gt; {
    id: string;
    cronTime: string;
}

export interface Query&lt;ID extends string = string&gt; {
    jobs: CronJob&lt;ID&gt;[];
}

export interface Mutation&lt;ID extends string = string&gt; {
    createJob(id: ID, cronTime: string): boolean;
    stopJob(id: ID): boolean;
}</file><file path=".gitignore">.env
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
node_modules
.next
dist
/.pnp
.pnp.js

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
package-lock.json
yarn-debug.log*
yarn-error.log*
pnpm-lock.yaml
*/.yarn-lock.yaml

# local env files
.env.local
.env.development.local
.env.test.local
.env.production.local

# vercel
.vercel

# typescript
*.tsbuildinfo</file><file path=".npmignore">/.bolt
/examples/
.stackblitzrc
tsconfig.reference.json</file><file path=".npmrc">@graphql-api:registry = https://npm.pkg.github.com</file><file path=".prettierrc">{ &quot;tabWidth&quot;: 2, &quot;useTabs&quot;: false }</file><file path=".stackblitzrc">{
    &quot;installDependencies&quot;: true,
    &quot;startCommand&quot;: &quot;pnpm --filter @/example dev&quot;
}</file><file path="codegen.yaml">schema:
  - src/**/*.graphql
generates:
  schema.graphql:
    plugins:
      - schema-ast
  types.ts:
    plugins:
      - typescript
  # https://www.graphql-code-generator.com/plugins/typescript-apollo-client-helpers
  helpers/apollo-client.ts:
    plugins:
      - typescript-apollo-client-helpers
  helpers/introspection-result.json:
    plugins:
      - fragment-matcher
    config:
      module: es2015
  helpers/introspection-result.cjs.json:
    plugins:
      - fragment-matcher
    config:
      module: commonjs</file><file path="package.json">{
  &quot;name&quot;: &quot;@graphql-api/cron.local&quot;,
  &quot;version&quot;: &quot;0.0.0&quot;,
  &quot;description&quot;: &quot;cron&quot;,
  &quot;main&quot;: &quot;src/index.js&quot;,
  &quot;type&quot;: &quot;module&quot;,
  &quot;exports&quot;: {
    &quot;.&quot;: {
      &quot;import&quot;: &quot;./src/index.ts&quot;,
      &quot;federation&quot;: []
    },
    &quot;./resolvers&quot;: [
      &quot;./build/resolvers&quot;
    ],
    &quot;./schema&quot;: [
      &quot;./schema.graphql&quot;
    ],
    &quot;./tsconfig&quot;: {
      &quot;import&quot;: &quot;./tsconfig.json&quot;
    }
  },
  &quot;typesVersions&quot;: {
    &quot;*&quot;: {
      &quot;.&quot;: [
        &quot;./build/types.d.ts&quot;
      ],
      &quot;federation:&quot;: [
        &quot;./federation/types.d.ts&quot;
      ]
    }
  },
  &quot;scripts&quot;: {
    &quot;build&quot;: &quot;tsc&quot;,
    &quot;codegen&quot;: &quot;graphql-codegen&quot;,
    &quot;example:build&quot;: &quot;pnpm --filter @/example dev&quot;,
    &quot;repomix&quot;: &quot;repomix&quot;
  },
  &quot;repository&quot;: {
    &quot;type&quot;: &quot;git&quot;,
    &quot;url&quot;: &quot;git+https://github.com/graphql-api/graphql-local-cron.git&quot;
  },
  &quot;publishConfig&quot;: {
    &quot;registry&quot;: &quot;https://npm.pkg.github.com/graphql-api&quot;
  },
  &quot;keywords&quot;: [
    &quot;graphql&quot;,
    &quot;apollo&quot;,
    &quot;gql&quot;,
    &quot;template&quot;,
    &quot;typescript&quot;
  ],
  &quot;author&quot;: {
    &quot;url&quot;: &quot;https://codeberg.org/jfa&quot;,
    &quot;name&quot;: &quot;jfa&quot;
  },
  &quot;license&quot;: &quot;ISC&quot;,
  &quot;bugs&quot;: {
    &quot;url&quot;: &quot;https://github.com/graphql-api/graphql-local-cron/issues&quot;
  },
  &quot;homepage&quot;: &quot;https://github.com/graphql-api/graphql-local-cron#readme&quot;,
  &quot;dependencies&quot;: {
    &quot;events&quot;: &quot;^3.3.0&quot;
  },
  &quot;devDependencies&quot;: {
    &quot;@graphql-codegen/cli&quot;: &quot;^2.16.5&quot;,
    &quot;@graphql-codegen/schema-ast&quot;: &quot;^2.6.1&quot;,
    &quot;@graphql-codegen/typescript&quot;: &quot;^2.8.8&quot;,
    &quot;@graphql-codegen/typescript-apollo-client-helpers&quot;: &quot;^2.2.6&quot;,
    &quot;@graphql-codegen/typescript-resolvers&quot;: &quot;^2.7.13&quot;,
    &quot;@types/node-cron&quot;: &quot;^3.0.11&quot;,
    &quot;graphql&quot;: &quot;^16.10.0&quot;,
    &quot;graphql-tag&quot;: &quot;^2.12.6&quot;,
    &quot;repomix&quot;: &quot;^0.2.30&quot;,
    &quot;typescript&quot;: &quot;^5.7.3&quot;
  },
  &quot;peerDependencies&quot;: {
    &quot;graphql&quot;: &quot;^16.10.0&quot;
  },
  &quot;pnpm&quot;: {
    &quot;overrides&quot;: {
      &quot;@types/react&quot;: &quot;19.0.10&quot;
    }
  }
}</file><file path="pnpm-workspace.yaml">packages:
  - .
  - examples/*

catalog:
  &apos;@types/react&apos;: ^19
  &apos;@types/react-dom&apos;: ^19
  eslint: ^9
  graphql: ^16
  next: ^15.2.0-canary.57
  next-auth: ^5.0.0-beta.25
  react: ^19
  react-dom: ^19
  prettier: ^3
  tailwindcss: ^4
  typescript: ^5.7.3
  zustand: ^5.0.3
  zod: ^3</file><file path="README.md"># @graphql-api/template

### examples

stackblitz
[![Open in StackBlitz](https://developer.stackblitz.com/img/open_in_stackblitz.svg)](https://stackblitz.com/github/graphql-api/graphql-api-template/tree/main/examples/next)

codesandbox


#### deploy:

koyeb
[![Deploy to Koyeb](https://www.koyeb.com/static/images/deploy/button.svg)](https://app.koyeb.com/deploy?type=git&amp;repository=github.com/koyeb/example-nestjs&amp;branch=main&amp;build_command=yarn%20run%20build&amp;run_command=yarn%20run%20start:prod&amp;name=nestjs-on-koyeb)

gatsby.cloud

netlify

vercel

next</file><file path="repomix.config.json">{
    &quot;output&quot;: {
        &quot;filePath&quot;: &quot;repomix-output.xml&quot;,
        &quot;style&quot;: &quot;xml&quot;,
        &quot;parsableStyle&quot;: true,
        &quot;compress&quot;: false,
        &quot;headerText&quot;: &quot;Custom header text&quot;,
       // &quot;instructionFilePath&quot;: &quot;repomix-instruction.md&quot;,
        &quot;fileSummary&quot;: true,
        &quot;directoryStructure&quot;: true,
        &quot;removeComments&quot;: false,
        &quot;removeEmptyLines&quot;: false,
        &quot;topFilesLength&quot;: 5,
        &quot;showLineNumbers&quot;: false,
        &quot;copyToClipboard&quot;: false,
        &quot;includeEmptyDirectories&quot;: false
    },
    &quot;include&quot;: [
        &quot;**/*&quot;
    ],
    &quot;ignore&quot;: {
        &quot;useGitignore&quot;: true,
        &quot;useDefaultPatterns&quot;: true,
        &quot;customPatterns&quot;: [
            &quot;tmp/&quot;,
            &quot;*.log&quot;
        ]
    },
    &quot;security&quot;: {
        &quot;enableSecurityCheck&quot;: true
    }
}</file><file path="tsconfig.json">{
  &quot;display&quot;: &quot;@graphq-api&quot;,
  &quot;$schema&quot;: &quot;https://json.schemastore.org/tsconfig&quot;,
  &quot;compilerOptions&quot;: {
    /* Visit https://aka.ms/tsconfig.json to read more about this file */
    /* Projects */
    // &quot;incremental&quot;: true,                              /* Enable incremental compilation */
    //&quot;composite&quot;: true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */
    // &quot;tsBuildInfoFile&quot;: &quot;./&quot;,                          /* Specify the folder for .tsbuildinfo incremental compilation files. */
    // &quot;disableSourceOfProjectReferenceRedirect&quot;: true,  /* Disable preferring source files instead of declaration files when referencing composite projects */
    // &quot;disableSolutionSearching&quot;: true,                 /* Opt a project out of multi-project reference checking when editing. */
    // &quot;disableReferencedProjectLoad&quot;: true,             /* Reduce the number of projects loaded automatically by TypeScript. */
    /* Language and Environment */
    &quot;target&quot;: &quot;es2016&quot;, /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
    &quot;lib&quot;: [
      &quot;ESNext&quot;
    ], /* Specify a set of bundled library declaration files that describe the target runtime environment. */
    // &quot;jsx&quot;: &quot;preserve&quot;,                                /* Specify what JSX code is generated. */
    // &quot;experimentalDecorators&quot;: true,                   /* Enable experimental support for TC39 stage 2 draft decorators. */
    // &quot;emitDecoratorMetadata&quot;: true,                    /* Emit design-type metadata for decorated declarations in source files. */
    // &quot;jsxFactory&quot;: &quot;&quot;,                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. &apos;React.createElement&apos; or &apos;h&apos; */
    // &quot;jsxFragmentFactory&quot;: &quot;&quot;,                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. &apos;React.Fragment&apos; or &apos;Fragment&apos;. */
    // &quot;jsxImportSource&quot;: &quot;&quot;,                            /* Specify module specifier used to import the JSX factory functions when using `jsx: react-jsx*`.` */
    // &quot;reactNamespace&quot;: &quot;&quot;,                             /* Specify the object invoked for `createElement`. This only applies when targeting `react` JSX emit. */
    // &quot;noLib&quot;: true, /* Disable including any library files, including the default lib.d.ts. */
    // &quot;useDefineForClassFields&quot;: true,                  /* Emit ECMAScript-standard-compliant class fields. */
    /* Modules */
    &quot;module&quot;: &quot;ESNext&quot;,
    &quot;rootDir&quot;: &quot;./&quot;,
    &quot;moduleResolution&quot;: &quot;bundler&quot;,
    &quot;baseUrl&quot;: &quot;./&quot;,
    // &quot;paths&quot;: {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
    // &quot;rootDirs&quot;: [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
    // &quot;typeRoots&quot;: [],                                  /* Specify multiple folders that act like `./node_modules/@types`. */
    // &quot;types&quot;: [],                                      /* Specify type package names to be included without being referenced in a source file. */
    // &quot;allowUmdGlobalAccess&quot;: true,                     /* Allow accessing UMD globals from modules. */
    // &quot;resolveJsonModule&quot;: true,                        /* Enable importing .json files */
    // &quot;noResolve&quot;: true,                                /* Disallow `import`s, `require`s or `&lt;reference&gt;`s from expanding the number of files TypeScript should add to a project. */
    /* JavaScript Support */
    &quot;allowJs&quot;: true, /* Allow JavaScript files to be a part of your program. Use the `checkJS` option to get errors from these files. */
    &quot;checkJs&quot;: true, /* Enable error reporting in type-checked JavaScript files. */
    // &quot;maxNodeModuleJsDepth&quot;: 1,                        /* Specify the maximum folder depth used for checking JavaScript files from `node_modules`. Only applicable with `allowJs`. */
    /* Emit */
    // &quot;declaration&quot;: true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
    // &quot;declarationMap&quot;: true,                           /* Create sourcemaps for d.ts files. */
    // &quot;emitDeclarationOnly&quot;: true,                      /* Only output d.ts files and not JavaScript files. */
    // &quot;sourceMap&quot;: true,                                /* Create source map files for emitted JavaScript files. */
    // &quot;outFile&quot;: &quot;./&quot;,                                  /* Specify a file that bundles all outputs into one JavaScript file. If `declaration` is true, also designates a file that bundles all .d.ts output. */
    &quot;outDir&quot;: &quot;./build&quot; /* Specify an output folder for all emitted files. */,
    // &quot;removeComments&quot;: true,                           /* Disable emitting comments. */
    // &quot;noEmit&quot;: true,                                   /* Disable emitting files from a compilation. */
    // &quot;importHelpers&quot;: true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
    // &quot;importsNotUsedAsValues&quot;: &quot;remove&quot;,               /* Specify emit/checking behavior for imports that are only used for types */
    // &quot;downlevelIteration&quot;: true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
    // &quot;sourceRoot&quot;: &quot;&quot;,                                 /* Specify the root path for debuggers to find the reference source code. */
    // &quot;mapRoot&quot;: &quot;&quot;,                                    /* Specify the location where debugger should locate map files instead of generated locations. */
    // &quot;inlineSourceMap&quot;: true,                          /* Include sourcemap files inside the emitted JavaScript. */
    // &quot;inlineSources&quot;: true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */
    // &quot;emitBOM&quot;: true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
    // &quot;newLine&quot;: &quot;crlf&quot;,                                /* Set the newline character for emitting files. */
    // &quot;stripInternal&quot;: true,                            /* Disable emitting declarations that have `@internal` in their JSDoc comments. */
    // &quot;noEmitHelpers&quot;: true,                            /* Disable generating custom helper functions like `__extends` in compiled output. */
    // &quot;noEmitOnError&quot;: true,                            /* Disable emitting files if any type checking errors are reported. */
    // &quot;preserveConstEnums&quot;: true,                       /* Disable erasing `const enum` declarations in generated code. */
    // &quot;declarationDir&quot;: &quot;./&quot;,                           /* Specify the output directory for generated declaration files. */
    // &quot;preserveValueImports&quot;: true,                     /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */
    /* Interop Constraints */
    // &quot;isolatedModules&quot;: true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */
    &quot;allowSyntheticDefaultImports&quot;: true, /* Allow &apos;import x from y&apos; when a module doesn&apos;t have a default export. */
    &quot;esModuleInterop&quot;: true /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility. */,
    // &quot;preserveSymlinks&quot;: true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
    &quot;forceConsistentCasingInFileNames&quot;: true /* Ensure that casing is correct in imports. */,
    /* Type Checking */
    &quot;strict&quot;: true /* Enable all strict type-checking options. */,
    // &quot;noImplicitAny&quot;: true,                            /* Enable error reporting for expressions and declarations with an implied `any` type.. */
    // &quot;strictNullChecks&quot;: true,                         /* When type checking, take into account `null` and `undefined`. */
    // &quot;strictFunctionTypes&quot;: true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    // &quot;strictBindCallApply&quot;: true,                      /* Check that the arguments for `bind`, `call`, and `apply` methods match the original function. */
    // &quot;strictPropertyInitialization&quot;: true,             /* Check for class properties that are declared but not set in the constructor. */
    // &quot;noImplicitThis&quot;: true,                           /* Enable error reporting when `this` is given the type `any`. */
    // &quot;useUnknownInCatchVariables&quot;: true,               /* Type catch clause variables as &apos;unknown&apos; instead of &apos;any&apos;. */
    // &quot;alwaysStrict&quot;: true,                             /* Ensure &apos;use strict&apos; is always emitted. */
    // &quot;noUnusedLocals&quot;: true,                           /* Enable error reporting when a local variables aren&apos;t read. */
    // &quot;noUnusedParameters&quot;: true,                       /* Raise an error when a function parameter isn&apos;t read */
    // &quot;exactOptionalPropertyTypes&quot;: true,               /* Interpret optional property types as written, rather than adding &apos;undefined&apos;. */
    // &quot;noImplicitReturns&quot;: true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */
    // &quot;noFallthroughCasesInSwitch&quot;: true,               /* Enable error reporting for fallthrough cases in switch statements. */
    // &quot;noUncheckedIndexedAccess&quot;: true,                 /* Include &apos;undefined&apos; in index signature results */
    // &quot;noImplicitOverride&quot;: true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */
    // &quot;noPropertyAccessFromIndexSignature&quot;: true,       /* Enforces using indexed accessors for keys declared using an indexed type */
    // &quot;allowUnusedLabels&quot;: true,                        /* Disable error reporting for unused labels. */
    // &quot;allowUnreachableCode&quot;: true,                     /* Disable error reporting for unreachable code. */
    /* Completeness */
    // &quot;skipDefaultLibCheck&quot;: true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
    &quot;skipLibCheck&quot;: true /* Skip type checking all .d.ts files. */
  },
  &quot;include&quot;: [
    &quot;src&quot;
  ],
  &quot;exclude&quot;: [
    &quot;node_modules&quot;,
    &quot;examples&quot;
  ]
}</file><file path="tsconfig.reference.json">{
  &quot;extends&quot;: [
    &quot;./tsconfig.json&quot;
  ],
  &quot;compilerOptions&quot;: {
    &quot;composite&quot;: true
  }
}</file></files></repomix>